<% popup_menu_view :a_menu, :pane => 'menu', :class => 'menu' do %>
  <%= menu_item_view :item_enabled_key_equiv_no_target, 
    :outlet => true, 
    :label => "", 
    :action => "onAltShiftA",
    :key_equivalent => 'alt_shift_a' 
  %>
  <%= menu_item_view :item_enabled_key_equiv_with_target, 
    :outlet => true, 
    :label => "", 
    :action => "onAltShiftB",
    :target => "SC.exampleController",
    :key_equivalent => 'alt_shift_b' 
  %>
  <%= menu_item_view :item_disabled_key_equiv, 
    :outlet => true, 
    :label => "", 
    :enabled => false, 
    :action => "onAltShiftB",
    :key_equivalent => 'alt_shift_b' 
  %>
<% end %>

<% view :view_1 do %>
  <% view :view_1_1, :outlet => true do %>
    <% view :view_1_1_1, :outlet => true do %>
    <% end %>
  <% end %>
  <% view :view_1_2, :outlet => true do %>
    <% view :view_1_2_1, :outlet => true do %>
    <% end %>
  <% end %>
<% end %>


<% content_for('final') do %>
<script>

Test.context("SC.Application", {

  "Should be instantiated and placed in SC.app on page load": function()
  {
    SC.app.kindOf(SC.Application).shouldEqual(true);
  },
  "SC.app keyPane should be set to SC.window by default": function()
  {
    var keyPane = SC.app.get('keyPane');
    ( keyPane == SC.window ).shouldEqual(true);
  },
  "SC.app mainPane should be set to SC.window by default": function()
  {
    var mainPane = SC.app.get('mainPane');
    ( mainPane == SC.window ).shouldEqual(true);
  },
  "Setting the keyPane shouldn't change the mainPane": function()
  {
    ( SC.app.get('mainPane') == SC.window ).shouldEqual(true);

    var pane = SC.PaneView.viewFor(null);
    SC.app.set('keyPane', pane);
    ( SC.app.get('mainPane') == SC.window ).shouldEqual(true);
  },

  setup: function()
  {
  },
  teardown: function()
  {
  }

});



Test.context("SC.Application's sendAction method", {

  "Should not handle actions that are not strings": function()
  {
    SC.app.sendAction( null, null, null ).shouldEqual(false);
    SC.app.sendAction( false, null, null ).shouldEqual(false);
    SC.app.sendAction( {}, null, null ).shouldEqual(false);
    SC.app.sendAction( function(){}, null, null ).shouldEqual(false);
  },
  "Should return boolean for whether an action is handled": function()
  {
    var leaf1 = SC.page.get('view1').view11.view111;
        
    leaf1.anActionThatReturnsNothing = this.anActionThatReturnsNothing;
    leaf1.anActionThatReturnsTrue    = this.anActionThatReturnsTrue;
    leaf1.anActionThatReturnsFalse   = this.anActionThatReturnsFalse;
    leaf1.becomeFirstResponder();

    SC.app.sendAction( "anActionThatReturnsNothing", leaf1, null ).shouldEqual(true);
    SC.app.sendAction( "anActionThatReturnsTrue", leaf1, null ).shouldEqual(true);

    SC.app.sendAction( "anActionThatReturnsFalse", leaf1, null ).shouldEqual(false);
    SC.app.sendAction( "anActionThatDoesNotExist", leaf1, null ).shouldEqual(false);
  },
  "Should ...": function()
  {
    var leaf1 = SC.page.get('view1').view11.view111;
    var leaf2 = SC.page.get('view1').view12.view121;
    
    leaf1.bubblingAction = this.anActionThatReturnsNothing;
    leaf2.bubblingAction = this.anActionThatReturnsNothing;
    
    leaf1.becomeFirstResponder();
  },

  setup: function()
  {
    this.anActionThatReturnsNothing = function() { this.__action_called__ = true; };
    this.anActionThatReturnsTrue    = function() { this.__action_called__ = true; return true; };
    this.anActionThatReturnsFalse   = function() { this.__action_called__ = true; return false; };
    SC.page.awake();
  },
  teardown: function()
  {
  }

});


</script>
<% end %>