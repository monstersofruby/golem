<% content_for('final') do %>
<script>

Test.context("creating SC.Set instances", {
  
  setup: function() {
    // create objects...
    a = { name: "a" } ;
    b = { name: "b" } ;
    c = { name: "c" } ;
  },

  teardown: function() {
    delete a;
    delete b;
    delete c;
  },
  
  "new SC.Set() should create empty set": function() {
    var set = new SC.Set() ;
    assertEqual(set.length, 0) ;
  },
  
  "new SC.Set([1,2,3]) should create set with three items in them": function(){
    var set = new SC.Set([a,b,c]) ;
    set.length.shouldEqual(3) ;
    set.contains(a).shouldEqual(YES) ;
    set.contains(b).shouldEqual(YES) ;
    set.contains(c).shouldEqual(YES) ;
  },
  
  "SC.Set.create() is an alias for new SC.Set()": function() {
    var set = SC.Set.create() ;
    set.length.shouldEqual(0) ;
    
    var set = SC.Set.create([a,b,c]) ;
    set.length.shouldEqual(3) ;
    set.contains(a).shouldEqual(YES) ;
    set.contains(b).shouldEqual(YES) ;
    set.contains(c).shouldEqual(YES) ;
  },
  
  "new SC.Set() should accept anything that implements SC.Array": function() {
    var arrayLikeObject = SC.Object.create(SC.Array, {
      
      _content: [a,b,c],
      length: 3,
      objectAt: function(idx) { return this._content[idx]; } 
    }) ;
    
    var set = SC.Set.create(arrayLikeObject) ;
    set.length.shouldEqual(3) ;
    set.contains(a).shouldEqual(YES) ;
    set.contains(b).shouldEqual(YES) ;
    set.contains(c).shouldEqual(YES) ;
  },
  
  "new SC.Set() should accept anything that looks like an array, even if it does not implement SC.Array": function() {
    var arrayLikeObject = { length: 3, '0': a, '1': b, '2': c } ;
    
    var set = SC.Set.create(arrayLikeObject) ;
    set.length.shouldEqual(3) ;
    set.contains(a).shouldEqual(YES) ;
    set.contains(b).shouldEqual(YES) ;
    set.contains(c).shouldEqual(YES) ;
  }

});

// The tests below also end up testing the contains() method pretty 
// exhaustively.
Test.context("SC.Set.add + SC.Set.contains", {
  
  setup: function() {
    set = SC.Set.create() ;
  },

  teardown: function() {
    delete set ;
  },
  
  "should add an SC.Object": function() {
    var obj = SC.Object.create() ;

    var oldLength = set.length ;
    set.add(obj);
    assertEqual(set.contains(obj), YES, "contains()") ;
    assertEqual(oldLength+1, set.length, "new set length") ;
  },
  
  "should add a regular hash": function() {
    var obj = {} ;

    var oldLength = set.length ;
    set.add(obj);
    assertEqual(set.contains(obj), YES, "contains()") ;
    assertEqual(oldLength+1, set.length, "new set length") ;
  },

  "should add a string": function() {
    var obj = "String!" ;

    var oldLength = set.length ;
    set.add(obj);
    assertEqual(set.contains(obj), YES, "contains()") ;
    assertEqual(oldLength+1, set.length, "new set length") ;
  },

  "should add a number": function() {
    var obj = 23 ;

    var oldLength = set.length ;
    set.add(obj);
    assertEqual(set.contains(obj), YES, "contains()") ;
    assertEqual(oldLength+1, set.length, "new set length") ;
  },

  "should add a bool": function() {
    var obj = true ;

    var oldLength = set.length ;
    set.add(obj);
    assertEqual(set.contains(obj), YES, "contains()") ;
    assertEqual(oldLength+1, set.length, "new set length") ;
  },

  "should add a function": function() {
    var obj = function() { return "Test function"; } ;

    var oldLength = set.length ;
    set.add(obj);
    assertEqual(set.contains(obj), YES, "contains()") ;
    assertEqual(oldLength+1, set.length, "new set length") ;
  },

  "should NOT add a null": function() {
    set.add(null) ;
    assertEqual(set.length, 0) ;
    assertEqual(set.contains(null), NO) ;
  },

  "should NOT add an undefined": function() {
    set.add(undefined) ;
    assertEqual(set.length, 0) ;
    assertEqual(set.contains(undefined), NO) ;
  }
  
});

Test.context("SC.Set.remove + SC.Set.contains", {
  
  // generate a set with every type of object, but none of the specific
  // ones we add in the tests below...
  setup: function() {
    set = SC.Set.create([
      SC.Object.create({ dummy: YES }),
      { isHash: YES },
      "Not the String",
      16, false]) ;
  },

  teardown: function() {
    delete set ;
  },
  
  "should remove an SC.Object and reduce length": function() {
    var obj = SC.Object.create() ;
    set.add(obj);
    assertEqual(set.contains(obj), YES) ;
    var oldLength = set.length ;
    
    set.remove(obj) ;
    assertEqual(NO, set.contains(obj), "should be removed") ;
    assertEqual(oldLength-1, set.length, "should be 1 shorter") ;
  },
  
  "should remove a regular hash and reduce length": function() {
    var obj = {} ;
    set.add(obj);
    assertEqual(set.contains(obj), YES) ;
    var oldLength = set.length ;
    
    set.remove(obj) ;
    assertEqual(NO, set.contains(obj), "should be removed") ;
    assertEqual(oldLength-1, set.length, "should be 1 shorter") ;
  },

  "should remove a string and reduce length": function() {
    var obj = "String!" ;
    set.add(obj);
    assertEqual(set.contains(obj), YES) ;
    var oldLength = set.length ;
    
    set.remove(obj) ;
    assertEqual(NO, set.contains(obj), "should be removed") ;
    assertEqual(oldLength-1, set.length, "should be 1 shorter") ;
  },
  
  "should remove a number and reduce length": function() {
    var obj = 23 ;
    set.add(obj);
    assertEqual(set.contains(obj), YES) ;
    var oldLength = set.length ;
    
    set.remove(obj) ;
    assertEqual(NO, set.contains(obj), "should be removed") ;
    assertEqual(oldLength-1, set.length, "should be 1 shorter") ;
  },
  
  "should remove a bool and reduce length": function() {
    var obj = true ;
    set.add(obj);
    assertEqual(set.contains(obj), YES) ;
    var oldLength = set.length ;
    
    set.remove(obj) ;
    assertEqual(NO, set.contains(obj), "should be removed") ;
    assertEqual(oldLength-1, set.length, "should be 1 shorter") ;
  },

  "should remove a function and reduce length": function() {
    var obj = function() { return "Test function"; } ;
    set.add(obj);
    assertEqual(set.contains(obj), YES) ;
    var oldLength = set.length ;
    
    set.remove(obj) ;
    assertEqual(NO, set.contains(obj), "should be removed") ;
    assertEqual(oldLength-1, set.length, "should be 1 shorter") ;
  },
  
  "should NOT remove a null": function() {
    var oldLength = set.length ;
    set.remove(null) ;
    assertEqual(oldLength, set.length) ;
  },
  
  "should NOT remove an undefined": function() {
    var oldLength = set.length ;
    set.remove(undefined) ;
    assertEqual(oldLength, set.length) ;
  },
  
  "should ignore removing an object not in the set": function() {
    var obj = SC.Object.create() ;
    var oldLength = set.length ;
    set.remove(obj) ;
    assertEqual(oldLength, set.length) ;
  }
  
});

</script>
<% end %>