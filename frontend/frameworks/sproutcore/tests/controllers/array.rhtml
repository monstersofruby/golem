<% content_for('final') do %>

<script type="text/javascript" charset="utf-8">

Test.context("SC.ArrayController", {
    
  "Should act like an empty array if it has non array-like content": function()
  {
    var items = [null, false, "FOOBAR!", 12, {}];
    for (var i=0, n=items.length; i < n; i++)
    {
      this.c.set('content', items[i]);
      this.c.isEqual([]).shouldEqual(true);
      this.c.get('length').shouldEqual(0);
      (this.c.objectAt(0) == undefined).shouldEqual(true);
    }
  },
  
  "Should act like a clone of whatever array was set as it's content": function()
  {
    this.c.set('content', this.multiple_a );
    this.c.get('length').shouldEqual(2);
    this.c.objectAt(0).get('test').shouldEqual('NAME0');
    this.c.objectAt(1).get('test').shouldEqual('NAME1');
    (this.c.objectAt(2) == undefined).shouldEqual(true);
  },
  
  "Should not clone it's content until a change has been made": function()
  {
    // note that we're not directly requesting the public 'contentClone' property, because
    // doing so would cause the clone to be created.
    (this.c.get('contentClone') == undefined).shouldEqual(true);
    this.c.set('content', this.multiple_a );
    (this.c.get('contentClone') == undefined).shouldEqual(true);
    this.c.popObject();
    (this.c.get('contentClone') == undefined).shouldEqual(false);
  },
  
  "Should modify it's managed content when making changes": function()
  {
    this.c.set('content', this.multiple_a );
    this.c.get('content').get('length').shouldEqual(2);
    this.c.popObject();
    this.c.get('content').get('length').shouldEqual(2);
    this.c.get('contentClone').get('length').shouldEqual(1);
  },
  
  "Should not modify managed content until commitChanges() if commitChangesImmediately is disabled": function() 
  {
    this.c.set('commitChangesImmediately', false) ;
    
    var content = this.multiple_a ;
    this.c.set('content', content );
    content.get('length').shouldEqual(2);

    this.c.popObject();
    content.get('length').shouldEqual(2) ;
    this.c.get('length').shouldEqual(1) ;
    
    this.c.commitChanges() ;
    content.get('length').shouldEqual(1) ;
    this.c.get('length').shouldEqual(1) ;
  },
  
  "Should flag itself as dirty when adding an item to the array": function()
  {
    this.c.set('content', this.multiple_a );
    this.c.get('hasChanges').shouldEqual(false);
    this.c.pushObject( SC.Object.create({ test: 'NAME2' }) );
    this.c.get('hasChanges').shouldEqual(true);
  },
  
  "Should not delete object on removal only if destroyOnRemoval = true": function() {
    var content = this.multiple_a ;

    this.c.set('content', content) ;
    this.c.set('destroyOnRemoval', true) ;

    var didDestroy = false ;
    content[0].destroy = function() { didDestroy = true; } ;
    content[1].destroy = function() { didDestroy = true; } ;
    
    this.c.removeAt(1);
    this.c.commitChanges() ; // force this to happen immediately.  It may be queued otherwise
    didDestroy.shouldEqual(true) ;
    
    didDestroy = false ;
    this.c.set('destroyOnRemoval', false) ;
    this.c.removeAt(0) ;
    this.c.commitChanges() ; 
    didDestroy.shouldEqual(false) ;
  },
  
  setup: function()
  {
    this.c = SC.ArrayController.create();
    
    this.multiple_a = [
      SC.Object.create({ test: 'NAME0', value: 0, flag: YES, array: [0,0,0] }),
      SC.Object.create({ test: 'NAME1', value: 1, flag: NO, array: [1,1,1] })
    ];
    
    this.single_a = [
      SC.Object.create({ test: 'NAME0', value: 0, flag: YES, array: [0,0,0] })
    ];
    
    this.empty_a = [];
    
    this.dummy_a = SC.Object.create(SC.Array, {
      length: 2,
      replace: function(idx, amt, objects) {
        this._items.replace(idx,amt,objects) ;
        this.set('length', this._items.length) ;
      },
      objectAt: function(idx) {
        return this._items.objectAt(idx) ;
      },
      _items: this.multiple_a
    });
  }

});

</script>

<% end %>