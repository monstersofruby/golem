<% content_for('final') do %>

<script type="text/javascript" charset="utf-8">

Test.context("SC.window event handlers", {

  "Should stop events when handled": function()
  {
    var e = SC.Mock.KeyEvent.create({ type: 'keyup', keyCode: 65 });
    SC.window.keyUp = function(e) { this.keyUpWasHandled = true; };
    
    SC.window._onkeyup(e).shouldEqual(false);
    SC.window.keyUpWasHandled.shouldEqual(true);
    e.stopped.shouldEqual(true);
  },

  "Should not stop events when handler sets the event's _stopWhenHandled property to false": function()
  {
    var e = SC.Mock.KeyEvent.create({ type: 'keyup', keyCode: 65 });
    SC.window.keyUp = function(e) { e._stopWhenHandled = false; this.keyUpWasHandled = true; };
    
    SC.window._onkeyup(e).shouldEqual(true);
    SC.window.keyUpWasHandled.shouldEqual(true);
    e.stopped.shouldEqual(false);
  },

  "Should not stop events when the event's _stopWhenHandled property is false *before* being sent to the handler": function()
  {
    var e = SC.Mock.KeyEvent.create({ type: 'keyup', keyCode: 65, _stopWhenHandled: false });
    SC.window.keyUp = function(e) { this.keyUpWasHandled = true; };
    
    SC.window._onkeyup(e).shouldEqual(true);
    SC.window.keyUpWasHandled.shouldEqual(true);
    e.stopped.shouldEqual(false);
  },

  setup: function()
  {
  }

});

</script>

<% end %>