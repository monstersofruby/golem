<% # ========================================================================
   # SC.View isVisibleInWindow Unit Test
   # ========================================================================
%>
<% content_for('final') do %>

<script>

var FRAME = { x: 10, y: 10, width: 30, height: 30 } ;

Test.context("CASE 1: View created outside of window", {

  "initial isVisibleInWindow should be false": function() {
    v.get('isVisibleInWindow').shouldEqual(false) ;
  },
  
  "adding to window should make it true": function() {
    SC.page.get('root').get('isVisibleInWindow').shouldEqual(true) ;
    
    SC.page.get('root').appendChild(v) ;
    v.get('isVisibleInWindow').shouldEqual(true) ;
  },

  "removing from window should make it false again": function() {
    SC.page.get('root').appendChild(v) ;
    v.get('isVisibleInWindow').shouldEqual(true) ;
    
    v.removeFromParent() ;
    v.get('isVisibleInWindow').shouldEqual(false) ;
  },
  
  setup: function() { 
    v = SC.View.extend({
      emptyElement: '<div class="case"></div>'
    }).create(); 
  }
  
});

Test.context("CASE 2: View in body", {

  "initial isVisibleInWindow should be true": function() {
    v.get('isVisibleInWindow').shouldEqual(true) ;
  },
  
  "moving to another view in window should still be true": function() {
    SC.page.get('root').appendChild(v) ;
    v.get('isVisibleInWindow').shouldEqual(true) ;
  },

  "removing from window should make it false": function() {
    v.removeFromParent() ;
    v.get('isVisibleInWindow').shouldEqual(false) ;

    // readd to window
    SC.page.get('root').appendChild(v) ;
  },
  
  "moving to a view that is offscreen should make it false": function() {
    v.get('isVisibleInWindow').shouldEqual(true) ;
    offscreen.appendChild(v) ;
    v.get('isVisibleInWindow').shouldEqual(false) ;
  },
  
  setup: function() { 
    v = SC.page.get('case2');
    offscreen = SC.View.create() ; 
  }
});

Test.context("CASE 3: View created in resources", {

  "initial isVisibleInWindow should be YES": function() {
    v.get('isVisibleInWindow').shouldEqual(YES) ;
  },
  
  "moving to a visible view in window should be true": function() {
    SC.page.get('root').appendChild(v) ;
    v.get('isVisibleInWindow').shouldEqual(true) ;
  },

  "removing from window should make it false": function() {
    v.removeFromParent() ;
    v.get('isVisibleInWindow').shouldEqual(false) ;
  },
  
  "moving to a view that is offscreen should make it false": function() {
    offscreen.appendChild(v) ;
    v.get('isVisibleInWindow').shouldEqual(false) ;
  },
  
  setup: function() { 
    v = SC.page.get('case3');
    offscreen = SC.View.create() ; 
  }

});

main = function() { SC.page.awake(); };

</script>

<% end %>

<% content_for('body') do %>

<style>

.case { background-color: white; }
.case .child { border: 1px red solid; }

.base {
  float: left;
  width: 200px;
  height: 100px;
  border: 1px #aaa solid;
  position: relative;
  margin: 2px;
}

.cases { position: absolute; bottom: 0 ; left: 0; right: 0; border-top: 1px #ccc solid; }

.base label {
  position: absolute;
  bottom: 4px;
  left: 4px;
}

.nested_child { border: 1px green solid; }

.case { 
  position: absolute;
  left: 10px;
  top: 10px;
  width: 30px;
  height: 30px;
}

</style>

<%= view :case2, :class => 'case', :inner_html => 'Case' %>

<%= view :root %>
</div>

<% end %>

<%= view :case3, :class => 'case', :inner_html => 'Case' %>
