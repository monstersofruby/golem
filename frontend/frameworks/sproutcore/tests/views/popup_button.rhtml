<% content_for('final') do %>
<script>


Test.context("A SC.PopupButtonView with no configured menu", {
  
  "Should return null when asked for it's menu": function()
  {
    for (var i=0, n=this.buttons.length; i < n; i++)
    {
      (buttons[i].get('menu') == null).shouldEqual(true);
    }
  },
  "Should return false if asked to trigger it's action": function()
  {
    for (var i=0, n=this.buttons.length; i < n; i++)
    {
      this.buttons[i].action().shouldEqual(false);
    }
  },
  "Should not perform keyEquivalents": function()
  {
    for (var i=0, n=this.buttons.length; i < n; i++)
    {
      this.buttons[i].performKeyEquivalent('alt_shift_z').shouldEqual(false);
    }
  },
  setup: function()
  {
    this.buttons = [
      SC.PopupButtonView.viewFor(null),
      SC.PopupButtonView.extend({ menuName: '' }).viewFor(null),
      SC.PopupButtonView.extend({ menuName: 'foobarMenu' }).viewFor(null),
      SC.PopupButtonView.extend({ menuName: false }).viewFor(null),
      SC.PopupButtonView.extend({ menuName: null }).viewFor(null) 
    ];
  },

  teardown: function()
  {
    delete this.buttons;
  }
   
});


Test.context("A SC.PopupButtonView with a properly configured menu", {
  
  "Should return a menu of the correct type": function()
  {
    (this.button.get('menu') != null).shouldEqual(true);
    this.button.get('menu').kindOf(SC.PopupMenuView).shouldEqual(true);
  },
  "Should return true if asked to trigger it's action": function()
  {
    this.button.action().shouldEqual(true);
  },
  "Should toggle the menu's visibility when triggering the action": function()
  {
    // for some reason this actually equals true... not sure why...
    this.button.get('menu').get('isVisible').shouldEqual(false);
    this.button.action();
    this.button.get('menu').get('isVisible').shouldEqual(true);
    this.button.action();
    this.button.get('menu').get('isVisible').shouldEqual(false);
  },
  "Should have it's isSelected state bound to the menu's visibility": function()
  {
    // either by triggering the action...
    this.button.get('isSelected').shouldEqual(false);
    this.button.action();
    this.button.get('isSelected').shouldEqual(true);
    this.button.action();
    this.button.get('isSelected').shouldEqual(false);
    // or by showing/hiding the menu...
    this.button.get('menu').set('isVisible', true);
    this.button.get('isSelected').shouldEqual(true);
    this.button.get('menu').set('isVisible', false);
    this.button.get('isSelected').shouldEqual(false);
  },
  "Should send performKeyEquivalent messages to it's menu": function()
  {
    this.button.get('menu').performKeyEquivalent('alt_shift_z', {}).shouldEqual(true);
    this.button.performKeyEquivalent('alt_shift_z', {}).shouldEqual(true);
  },
  "Should not send performKeyEquivalent messages to it's menu if disabled": function()
  {
    this.button.set('isEnabled', false);
    this.button.performKeyEquivalent('alt_shift_z', {}).shouldEqual(false);
  },
  "Should not performKeyEquivalent for disabled menu items": function()
  {
    this.button.performKeyEquivalent('alt_shift_d', {}).shouldEqual(false);
  },
  setup: function()
  {
    this.menu = SC.PopupMenuView.extend({ paneType: "menu" }).create();
    this.menu.appendChild( SC.MenuItemView.extend({ keyEquivalent: "alt_shift_z" }).create() );
    this.menu.appendChild( SC.MenuItemView.extend({ keyEquivalent: "alt_shift_d", isEnabled: false }).create() );

    this.button = SC.PopupButtonView.create();
    this.button.set('menu', this.menu);
  },
  teardown: function()
  {
    delete this.menu;
    delete this.button;
  }
  
});




</script>
<% end %>